import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score, roc_curve


file_path = r"C:\Users\ASUS\Downloads\LoanData_Preprocessed_v1.2.csv"
df = pd.read_csv(file_path)

# Dataset Overview
print(df.info())
print(df.head())

# Statistical Summary (e.g Mean,Median)
summary_stats = df.describe()
print(summary_stats)

# Class Balance Analyzes the proportion of loans that defaulted vs. those that didn’t.
class_balance = df['default'].value_counts(normalize=True) * 100
print("\nClass Balance (%):\n", class_balance)

# Correlation Analysis Calculates correlations between numerical variables to identify relationships.
correlation_matrix = df.corr()

# Visualizations
#Sets a white grid style for better readability.
#Creates a 2x2 grid of plots with a figure size of 14x10 inches.
sns.set(style="whitegrid")
fig, axes = plt.subplots(2, 2, figsize=(14, 10))

# Class Balance Plot
#Count plot to show how many loans are in default (1) vs. not (0).
sns.countplot(x='default', data=df, ax=axes[0, 0], palette='Set2')
axes[0, 0].set_title('Loan Default Distribution')
axes[0, 0].set_xlabel('Default (0 = No, 1 = Yes)')
axes[0, 0].set_ylabel('Count')

# Income Distribution
#Histogram with a KDE curve to analyze the distribution of income.
#Detects if the income distribution is skewed.
sns.histplot(df['income'], kde=True, bins=30, ax=axes[0, 1], color='skyblue')
axes[0, 1].set_title('Income Distribution')
axes[0, 1].set_xlabel('Income (in thousands)')

# Debt-to-Income Ratio Distribution
#Examines how the debt-to-income ratio is distributed.
#Higher ratios may indicate a higher default risk.
sns.histplot(df['debtinc'], kde=True, bins=30, ax=axes[1, 0], color='salmon')
axes[1, 0].set_title('Debt-to-Income Ratio Distribution')
axes[1, 0].set_xlabel('Debt-to-Income Ratio')

# Correlation Heatmap
#Heatmap visualizing the correlation matrix.
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', ax=axes[1, 1])
axes[1, 1].set_title('Correlation Matrix')

#Adjusts subplot spacing to prevent overlap.
#Displays all plots.
plt.tight_layout()
plt.show()

# Data Preprocessing
X = df.drop('default', axis=1)
y = df['default']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Feature Scaling
#Standardizes features by removing the mean and scaling to unit variance.
#Prevents bias due to varying feature scales.
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print("Training Set Shape:", X_train_scaled.shape)
print("Testing Set Shape:", X_test_scaled.shape)

#Predicts default (0 or 1) and probabilities for the test set.
log_reg = LogisticRegression(random_state=42)
log_reg.fit(X_train_scaled, y_train)
y_pred_logreg = log_reg.predict(X_test_scaled)
y_prob_logreg = log_reg.predict_proba(X_test_scaled)[:, 1]

#Support Vector Machine.
#Predicts default classes and probabilities.
svm_clf = SVC(probability=True, random_state=42)
svm_clf.fit(X_train_scaled, y_train)

y_pred_svm = svm_clf.predict(X_test_scaled)
y_prob_svm = svm_clf.predict_proba(X_test_scaled)[:, 1]

print("\nSVM Report:\n", classification_report(y_test, y_pred_svm))
print("ROC-AUC Score (SVM):", roc_auc_score(y_test, y_prob_svm))


#classification_report → Provides precision, recall, F1-score.
#roc_auc_score → Measures the ability to distinguish between classes.
print("\nLogistic Regression Report:\n", classification_report(y_test, y_pred_logreg))
print("ROC-AUC Score (Logistic Regression):", roc_auc_score(y_test, y_prob_logreg))

print("\nSVM Report:\n", classification_report(y_test, y_pred_svm))
print("ROC-AUC Score (SVM):", roc_auc_score(y_test, y_prob_svm))

#Plots the ROC curve to visualize model performance.
plt.figure(figsize=(8, 6))
fpr_logreg, tpr_logreg, _ = roc_curve(y_test, y_prob_logreg)
fpr_svm, tpr_svm, _ = roc_curve(y_test, y_prob_svm)

plt.plot(fpr_logreg, tpr_logreg, label='Logistic Regression')
plt.plot(fpr_svm, tpr_svm, label='SVM')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()
